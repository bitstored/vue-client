/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.file_service.ComputeSizeRequest', null, global);
goog.exportSymbol('proto.file_service.ComputeSizeResponse', null, global);
goog.exportSymbol('proto.file_service.CreateDriveRequest', null, global);
goog.exportSymbol('proto.file_service.CreateDriveResponse', null, global);
goog.exportSymbol('proto.file_service.CreateNewFileRequest', null, global);
goog.exportSymbol('proto.file_service.CreateNewFileResponse', null, global);
goog.exportSymbol('proto.file_service.CreateNewFolderRequest', null, global);
goog.exportSymbol('proto.file_service.CreateNewFolderResponse', null, global);
goog.exportSymbol('proto.file_service.DeleteFileRequest', null, global);
goog.exportSymbol('proto.file_service.DeleteFileResponse', null, global);
goog.exportSymbol('proto.file_service.DownloadFileRequest', null, global);
goog.exportSymbol('proto.file_service.DownloadFileResponse', null, global);
goog.exportSymbol('proto.file_service.FSLevel', null, global);
goog.exportSymbol('proto.file_service.FSTree', null, global);
goog.exportSymbol('proto.file_service.File', null, global);
goog.exportSymbol('proto.file_service.Folder', null, global);
goog.exportSymbol('proto.file_service.GetFileContentRequest', null, global);
goog.exportSymbol('proto.file_service.GetFileContentResponse', null, global);
goog.exportSymbol('proto.file_service.GetFileTreeRequest', null, global);
goog.exportSymbol('proto.file_service.GetFileTreeResponse', null, global);
goog.exportSymbol('proto.file_service.GetFolderContentRequest', null, global);
goog.exportSymbol('proto.file_service.GetFolderContentResponse', null, global);
goog.exportSymbol('proto.file_service.GetMyDriveIdRequest', null, global);
goog.exportSymbol('proto.file_service.GetMyDriveIdResponse', null, global);
goog.exportSymbol('proto.file_service.MoveFileRequest', null, global);
goog.exportSymbol('proto.file_service.MoveFileResponse', null, global);
goog.exportSymbol('proto.file_service.RenameFileRequest', null, global);
goog.exportSymbol('proto.file_service.RenameFileResponse', null, global);
goog.exportSymbol('proto.file_service.ShareFileRequest', null, global);
goog.exportSymbol('proto.file_service.ShareFileResponse', null, global);
goog.exportSymbol('proto.file_service.Type', null, global);
goog.exportSymbol('proto.file_service.UpdateFileContentRequest', null, global);
goog.exportSymbol('proto.file_service.UpdateFileContentResponse', null, global);
goog.exportSymbol('proto.file_service.UploadFileRequest', null, global);
goog.exportSymbol('proto.file_service.UploadFileResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.GetMyDriveIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.GetMyDriveIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.GetMyDriveIdRequest.displayName = 'proto.file_service.GetMyDriveIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.GetMyDriveIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.GetMyDriveIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.GetMyDriveIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetMyDriveIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.GetMyDriveIdRequest}
 */
proto.file_service.GetMyDriveIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.GetMyDriveIdRequest;
  return proto.file_service.GetMyDriveIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.GetMyDriveIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.GetMyDriveIdRequest}
 */
proto.file_service.GetMyDriveIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.GetMyDriveIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.GetMyDriveIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.GetMyDriveIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetMyDriveIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.file_service.GetMyDriveIdRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.GetMyDriveIdRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.GetMyDriveIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.GetMyDriveIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.GetMyDriveIdResponse.displayName = 'proto.file_service.GetMyDriveIdResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.GetMyDriveIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.GetMyDriveIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.GetMyDriveIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetMyDriveIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    driveId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.GetMyDriveIdResponse}
 */
proto.file_service.GetMyDriveIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.GetMyDriveIdResponse;
  return proto.file_service.GetMyDriveIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.GetMyDriveIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.GetMyDriveIdResponse}
 */
proto.file_service.GetMyDriveIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriveId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.GetMyDriveIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.GetMyDriveIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.GetMyDriveIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetMyDriveIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDriveId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string drive_id = 1;
 * @return {string}
 */
proto.file_service.GetMyDriveIdResponse.prototype.getDriveId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.GetMyDriveIdResponse.prototype.setDriveId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.ComputeSizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.ComputeSizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.ComputeSizeRequest.displayName = 'proto.file_service.ComputeSizeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.ComputeSizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.ComputeSizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.ComputeSizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.ComputeSizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.ComputeSizeRequest}
 */
proto.file_service.ComputeSizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.ComputeSizeRequest;
  return proto.file_service.ComputeSizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.ComputeSizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.ComputeSizeRequest}
 */
proto.file_service.ComputeSizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.ComputeSizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.ComputeSizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.ComputeSizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.ComputeSizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.file_service.ComputeSizeRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.ComputeSizeRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.ComputeSizeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.ComputeSizeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.ComputeSizeResponse.displayName = 'proto.file_service.ComputeSizeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.ComputeSizeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.ComputeSizeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.ComputeSizeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.ComputeSizeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    compressedSize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.ComputeSizeResponse}
 */
proto.file_service.ComputeSizeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.ComputeSizeResponse;
  return proto.file_service.ComputeSizeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.ComputeSizeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.ComputeSizeResponse}
 */
proto.file_service.ComputeSizeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInitialSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCompressedSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.ComputeSizeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.ComputeSizeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.ComputeSizeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.ComputeSizeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialSize();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCompressedSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 initial_size = 1;
 * @return {number}
 */
proto.file_service.ComputeSizeResponse.prototype.getInitialSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.file_service.ComputeSizeResponse.prototype.setInitialSize = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 compressed_size = 2;
 * @return {number}
 */
proto.file_service.ComputeSizeResponse.prototype.getCompressedSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.file_service.ComputeSizeResponse.prototype.setCompressedSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.Folder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.Folder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.Folder.displayName = 'proto.file_service.Folder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.Folder.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.Folder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.Folder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.Folder.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    identifier: jspb.Message.getFieldWithDefault(msg, 3, ""),
    creationDate: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.Folder}
 */
proto.file_service.Folder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.Folder;
  return proto.file_service.Folder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.Folder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.Folder}
 */
proto.file_service.Folder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.Folder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.Folder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.Folder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.Folder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreationDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string parent_identifier = 1;
 * @return {string}
 */
proto.file_service.Folder.prototype.getParentIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.Folder.prototype.setParentIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.file_service.Folder.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.Folder.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string identifier = 3;
 * @return {string}
 */
proto.file_service.Folder.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.Folder.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string creation_date = 4;
 * @return {string}
 */
proto.file_service.Folder.prototype.getCreationDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.file_service.Folder.prototype.setCreationDate = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.FSLevel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.file_service.FSLevel.repeatedFields_, null);
};
goog.inherits(proto.file_service.FSLevel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.FSLevel.displayName = 'proto.file_service.FSLevel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.file_service.FSLevel.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.FSLevel.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.FSLevel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.FSLevel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.FSLevel.toObject = function(includeInstance, msg) {
  var f, obj = {
    folder: (f = msg.getFolder()) && proto.file_service.Folder.toObject(includeInstance, f),
    foldersList: jspb.Message.toObjectList(msg.getFoldersList(),
    proto.file_service.Folder.toObject, includeInstance),
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    proto.file_service.File.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.FSLevel}
 */
proto.file_service.FSLevel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.FSLevel;
  return proto.file_service.FSLevel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.FSLevel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.FSLevel}
 */
proto.file_service.FSLevel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.file_service.Folder;
      reader.readMessage(value,proto.file_service.Folder.deserializeBinaryFromReader);
      msg.setFolder(value);
      break;
    case 2:
      var value = new proto.file_service.Folder;
      reader.readMessage(value,proto.file_service.Folder.deserializeBinaryFromReader);
      msg.addFolders(value);
      break;
    case 3:
      var value = new proto.file_service.File;
      reader.readMessage(value,proto.file_service.File.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.FSLevel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.FSLevel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.FSLevel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.FSLevel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.file_service.Folder.serializeBinaryToWriter
    );
  }
  f = message.getFoldersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.file_service.Folder.serializeBinaryToWriter
    );
  }
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.file_service.File.serializeBinaryToWriter
    );
  }
};


/**
 * optional Folder folder = 1;
 * @return {?proto.file_service.Folder}
 */
proto.file_service.FSLevel.prototype.getFolder = function() {
  return /** @type{?proto.file_service.Folder} */ (
    jspb.Message.getWrapperField(this, proto.file_service.Folder, 1));
};


/** @param {?proto.file_service.Folder|undefined} value */
proto.file_service.FSLevel.prototype.setFolder = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.file_service.FSLevel.prototype.clearFolder = function() {
  this.setFolder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.file_service.FSLevel.prototype.hasFolder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Folder folders = 2;
 * @return {!Array<!proto.file_service.Folder>}
 */
proto.file_service.FSLevel.prototype.getFoldersList = function() {
  return /** @type{!Array<!proto.file_service.Folder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.file_service.Folder, 2));
};


/** @param {!Array<!proto.file_service.Folder>} value */
proto.file_service.FSLevel.prototype.setFoldersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.file_service.Folder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.file_service.Folder}
 */
proto.file_service.FSLevel.prototype.addFolders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.file_service.Folder, opt_index);
};


proto.file_service.FSLevel.prototype.clearFoldersList = function() {
  this.setFoldersList([]);
};


/**
 * repeated File files = 3;
 * @return {!Array<!proto.file_service.File>}
 */
proto.file_service.FSLevel.prototype.getFilesList = function() {
  return /** @type{!Array<!proto.file_service.File>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.file_service.File, 3));
};


/** @param {!Array<!proto.file_service.File>} value */
proto.file_service.FSLevel.prototype.setFilesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.file_service.File=} opt_value
 * @param {number=} opt_index
 * @return {!proto.file_service.File}
 */
proto.file_service.FSLevel.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.file_service.File, opt_index);
};


proto.file_service.FSLevel.prototype.clearFilesList = function() {
  this.setFilesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.FSTree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.file_service.FSTree.repeatedFields_, null);
};
goog.inherits(proto.file_service.FSTree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.FSTree.displayName = 'proto.file_service.FSTree';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.file_service.FSTree.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.FSTree.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.FSTree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.FSTree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.FSTree.toObject = function(includeInstance, msg) {
  var f, obj = {
    folder: (f = msg.getFolder()) && proto.file_service.Folder.toObject(includeInstance, f),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.file_service.FSLevel.toObject, includeInstance),
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    proto.file_service.File.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.FSTree}
 */
proto.file_service.FSTree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.FSTree;
  return proto.file_service.FSTree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.FSTree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.FSTree}
 */
proto.file_service.FSTree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.file_service.Folder;
      reader.readMessage(value,proto.file_service.Folder.deserializeBinaryFromReader);
      msg.setFolder(value);
      break;
    case 2:
      var value = new proto.file_service.FSLevel;
      reader.readMessage(value,proto.file_service.FSLevel.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    case 3:
      var value = new proto.file_service.File;
      reader.readMessage(value,proto.file_service.File.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.FSTree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.FSTree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.FSTree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.FSTree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.file_service.Folder.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.file_service.FSLevel.serializeBinaryToWriter
    );
  }
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.file_service.File.serializeBinaryToWriter
    );
  }
};


/**
 * optional Folder folder = 1;
 * @return {?proto.file_service.Folder}
 */
proto.file_service.FSTree.prototype.getFolder = function() {
  return /** @type{?proto.file_service.Folder} */ (
    jspb.Message.getWrapperField(this, proto.file_service.Folder, 1));
};


/** @param {?proto.file_service.Folder|undefined} value */
proto.file_service.FSTree.prototype.setFolder = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.file_service.FSTree.prototype.clearFolder = function() {
  this.setFolder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.file_service.FSTree.prototype.hasFolder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated FSLevel children = 2;
 * @return {!Array<!proto.file_service.FSLevel>}
 */
proto.file_service.FSTree.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.file_service.FSLevel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.file_service.FSLevel, 2));
};


/** @param {!Array<!proto.file_service.FSLevel>} value */
proto.file_service.FSTree.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.file_service.FSLevel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.file_service.FSLevel}
 */
proto.file_service.FSTree.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.file_service.FSLevel, opt_index);
};


proto.file_service.FSTree.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};


/**
 * repeated File files = 3;
 * @return {!Array<!proto.file_service.File>}
 */
proto.file_service.FSTree.prototype.getFilesList = function() {
  return /** @type{!Array<!proto.file_service.File>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.file_service.File, 3));
};


/** @param {!Array<!proto.file_service.File>} value */
proto.file_service.FSTree.prototype.setFilesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.file_service.File=} opt_value
 * @param {number=} opt_index
 * @return {!proto.file_service.File}
 */
proto.file_service.FSTree.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.file_service.File, opt_index);
};


proto.file_service.FSTree.prototype.clearFilesList = function() {
  this.setFilesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.File.displayName = 'proto.file_service.File';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.File.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.File} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.File.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    identifier: jspb.Message.getFieldWithDefault(msg, 3, ""),
    creationDate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fileType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    writable: jspb.Message.getFieldWithDefault(msg, 7, false),
    pb_private: jspb.Message.getFieldWithDefault(msg, 8, false),
    content: msg.getContent_asB64(),
    initSize: jspb.Message.getFieldWithDefault(msg, 10, 0),
    compressedSize: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.File}
 */
proto.file_service.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.File;
  return proto.file_service.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.File}
 */
proto.file_service.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationDate(value);
      break;
    case 6:
      var value = /** @type {!proto.file_service.Type} */ (reader.readEnum());
      msg.setFileType(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWritable(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrivate(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInitSize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCompressedSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.File.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.File} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.File.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreationDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFileType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getWritable();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPrivate();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getInitSize();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getCompressedSize();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
};


/**
 * optional string parent_identifier = 1;
 * @return {string}
 */
proto.file_service.File.prototype.getParentIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.File.prototype.setParentIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.file_service.File.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.File.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string identifier = 3;
 * @return {string}
 */
proto.file_service.File.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.File.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string creation_date = 4;
 * @return {string}
 */
proto.file_service.File.prototype.getCreationDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.file_service.File.prototype.setCreationDate = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Type file_type = 6;
 * @return {!proto.file_service.Type}
 */
proto.file_service.File.prototype.getFileType = function() {
  return /** @type {!proto.file_service.Type} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.file_service.Type} value */
proto.file_service.File.prototype.setFileType = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool writable = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.file_service.File.prototype.getWritable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.file_service.File.prototype.setWritable = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool private = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.file_service.File.prototype.getPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.file_service.File.prototype.setPrivate = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bytes content = 9;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.File.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes content = 9;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.file_service.File.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.file_service.File.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.File.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional int64 init_size = 10;
 * @return {number}
 */
proto.file_service.File.prototype.getInitSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.file_service.File.prototype.setInitSize = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 compressed_size = 11;
 * @return {number}
 */
proto.file_service.File.prototype.getCompressedSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.file_service.File.prototype.setCompressedSize = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.CreateDriveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.CreateDriveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.CreateDriveRequest.displayName = 'proto.file_service.CreateDriveRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.CreateDriveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.CreateDriveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.CreateDriveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateDriveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.CreateDriveRequest}
 */
proto.file_service.CreateDriveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.CreateDriveRequest;
  return proto.file_service.CreateDriveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.CreateDriveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.CreateDriveRequest}
 */
proto.file_service.CreateDriveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.CreateDriveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.CreateDriveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.CreateDriveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateDriveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.file_service.CreateDriveRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.CreateDriveRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.CreateDriveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.CreateDriveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.CreateDriveResponse.displayName = 'proto.file_service.CreateDriveResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.CreateDriveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.CreateDriveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.CreateDriveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateDriveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    driveId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.CreateDriveResponse}
 */
proto.file_service.CreateDriveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.CreateDriveResponse;
  return proto.file_service.CreateDriveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.CreateDriveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.CreateDriveResponse}
 */
proto.file_service.CreateDriveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriveId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.CreateDriveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.CreateDriveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.CreateDriveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateDriveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDriveId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.CreateDriveResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.CreateDriveResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.CreateDriveResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.CreateDriveResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string drive_id = 3;
 * @return {string}
 */
proto.file_service.CreateDriveResponse.prototype.getDriveId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.CreateDriveResponse.prototype.setDriveId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.UploadFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.UploadFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.UploadFileRequest.displayName = 'proto.file_service.UploadFileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.UploadFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.UploadFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.UploadFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.UploadFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: (f = msg.getFile()) && proto.file_service.File.toObject(includeInstance, f),
    userId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    secretPhrase: msg.getSecretPhrase_asB64(),
    encodedPhrase: msg.getEncodedPhrase_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.UploadFileRequest}
 */
proto.file_service.UploadFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.UploadFileRequest;
  return proto.file_service.UploadFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.UploadFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.UploadFileRequest}
 */
proto.file_service.UploadFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.file_service.File;
      reader.readMessage(value,proto.file_service.File.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecretPhrase(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncodedPhrase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.UploadFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.UploadFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.UploadFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.UploadFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.file_service.File.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSecretPhrase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getEncodedPhrase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional File file = 1;
 * @return {?proto.file_service.File}
 */
proto.file_service.UploadFileRequest.prototype.getFile = function() {
  return /** @type{?proto.file_service.File} */ (
    jspb.Message.getWrapperField(this, proto.file_service.File, 1));
};


/** @param {?proto.file_service.File|undefined} value */
proto.file_service.UploadFileRequest.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.file_service.UploadFileRequest.prototype.clearFile = function() {
  this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.file_service.UploadFileRequest.prototype.hasFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_id = 4;
 * @return {string}
 */
proto.file_service.UploadFileRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.file_service.UploadFileRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes secret_phrase = 2;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.UploadFileRequest.prototype.getSecretPhrase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes secret_phrase = 2;
 * This is a type-conversion wrapper around `getSecretPhrase()`
 * @return {string}
 */
proto.file_service.UploadFileRequest.prototype.getSecretPhrase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecretPhrase()));
};


/**
 * optional bytes secret_phrase = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecretPhrase()`
 * @return {!Uint8Array}
 */
proto.file_service.UploadFileRequest.prototype.getSecretPhrase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecretPhrase()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.UploadFileRequest.prototype.setSecretPhrase = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes encoded_phrase = 3;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.UploadFileRequest.prototype.getEncodedPhrase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes encoded_phrase = 3;
 * This is a type-conversion wrapper around `getEncodedPhrase()`
 * @return {string}
 */
proto.file_service.UploadFileRequest.prototype.getEncodedPhrase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncodedPhrase()));
};


/**
 * optional bytes encoded_phrase = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncodedPhrase()`
 * @return {!Uint8Array}
 */
proto.file_service.UploadFileRequest.prototype.getEncodedPhrase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncodedPhrase()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.UploadFileRequest.prototype.setEncodedPhrase = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.UploadFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.UploadFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.UploadFileResponse.displayName = 'proto.file_service.UploadFileResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.UploadFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.UploadFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.UploadFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.UploadFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fileId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    watermarkMessage: msg.getWatermarkMessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.UploadFileResponse}
 */
proto.file_service.UploadFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.UploadFileResponse;
  return proto.file_service.UploadFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.UploadFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.UploadFileResponse}
 */
proto.file_service.UploadFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWatermarkMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.UploadFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.UploadFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.UploadFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.UploadFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFileId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWatermarkMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.UploadFileResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.UploadFileResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.UploadFileResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.UploadFileResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string file_id = 3;
 * @return {string}
 */
proto.file_service.UploadFileResponse.prototype.getFileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.UploadFileResponse.prototype.setFileId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes watermark_message = 4;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.UploadFileResponse.prototype.getWatermarkMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes watermark_message = 4;
 * This is a type-conversion wrapper around `getWatermarkMessage()`
 * @return {string}
 */
proto.file_service.UploadFileResponse.prototype.getWatermarkMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWatermarkMessage()));
};


/**
 * optional bytes watermark_message = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWatermarkMessage()`
 * @return {!Uint8Array}
 */
proto.file_service.UploadFileResponse.prototype.getWatermarkMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWatermarkMessage()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.UploadFileResponse.prototype.setWatermarkMessage = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.CreateNewFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.CreateNewFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.CreateNewFileRequest.displayName = 'proto.file_service.CreateNewFileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.CreateNewFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.CreateNewFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.CreateNewFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateNewFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: (f = msg.getFile()) && proto.file_service.File.toObject(includeInstance, f),
    secretPhrase: msg.getSecretPhrase_asB64(),
    userId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.CreateNewFileRequest}
 */
proto.file_service.CreateNewFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.CreateNewFileRequest;
  return proto.file_service.CreateNewFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.CreateNewFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.CreateNewFileRequest}
 */
proto.file_service.CreateNewFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.file_service.File;
      reader.readMessage(value,proto.file_service.File.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecretPhrase(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.CreateNewFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.CreateNewFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.CreateNewFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateNewFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.file_service.File.serializeBinaryToWriter
    );
  }
  f = message.getSecretPhrase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional File file = 1;
 * @return {?proto.file_service.File}
 */
proto.file_service.CreateNewFileRequest.prototype.getFile = function() {
  return /** @type{?proto.file_service.File} */ (
    jspb.Message.getWrapperField(this, proto.file_service.File, 1));
};


/** @param {?proto.file_service.File|undefined} value */
proto.file_service.CreateNewFileRequest.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.file_service.CreateNewFileRequest.prototype.clearFile = function() {
  this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.file_service.CreateNewFileRequest.prototype.hasFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes secret_phrase = 2;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.CreateNewFileRequest.prototype.getSecretPhrase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes secret_phrase = 2;
 * This is a type-conversion wrapper around `getSecretPhrase()`
 * @return {string}
 */
proto.file_service.CreateNewFileRequest.prototype.getSecretPhrase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecretPhrase()));
};


/**
 * optional bytes secret_phrase = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecretPhrase()`
 * @return {!Uint8Array}
 */
proto.file_service.CreateNewFileRequest.prototype.getSecretPhrase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecretPhrase()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.CreateNewFileRequest.prototype.setSecretPhrase = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.file_service.CreateNewFileRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.CreateNewFileRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.CreateNewFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.CreateNewFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.CreateNewFileResponse.displayName = 'proto.file_service.CreateNewFileResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.CreateNewFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.CreateNewFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.CreateNewFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateNewFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fileId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.CreateNewFileResponse}
 */
proto.file_service.CreateNewFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.CreateNewFileResponse;
  return proto.file_service.CreateNewFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.CreateNewFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.CreateNewFileResponse}
 */
proto.file_service.CreateNewFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.CreateNewFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.CreateNewFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.CreateNewFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateNewFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFileId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.CreateNewFileResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.CreateNewFileResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.CreateNewFileResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.CreateNewFileResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string file_id = 3;
 * @return {string}
 */
proto.file_service.CreateNewFileResponse.prototype.getFileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.CreateNewFileResponse.prototype.setFileId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.CreateNewFolderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.CreateNewFolderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.CreateNewFolderRequest.displayName = 'proto.file_service.CreateNewFolderRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.CreateNewFolderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.CreateNewFolderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.CreateNewFolderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateNewFolderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    folder: (f = msg.getFolder()) && proto.file_service.Folder.toObject(includeInstance, f),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.CreateNewFolderRequest}
 */
proto.file_service.CreateNewFolderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.CreateNewFolderRequest;
  return proto.file_service.CreateNewFolderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.CreateNewFolderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.CreateNewFolderRequest}
 */
proto.file_service.CreateNewFolderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.file_service.Folder;
      reader.readMessage(value,proto.file_service.Folder.deserializeBinaryFromReader);
      msg.setFolder(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.CreateNewFolderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.CreateNewFolderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.CreateNewFolderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateNewFolderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.file_service.Folder.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Folder folder = 1;
 * @return {?proto.file_service.Folder}
 */
proto.file_service.CreateNewFolderRequest.prototype.getFolder = function() {
  return /** @type{?proto.file_service.Folder} */ (
    jspb.Message.getWrapperField(this, proto.file_service.Folder, 1));
};


/** @param {?proto.file_service.Folder|undefined} value */
proto.file_service.CreateNewFolderRequest.prototype.setFolder = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.file_service.CreateNewFolderRequest.prototype.clearFolder = function() {
  this.setFolder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.file_service.CreateNewFolderRequest.prototype.hasFolder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.file_service.CreateNewFolderRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.CreateNewFolderRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.CreateNewFolderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.CreateNewFolderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.CreateNewFolderResponse.displayName = 'proto.file_service.CreateNewFolderResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.CreateNewFolderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.CreateNewFolderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.CreateNewFolderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateNewFolderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    folderId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.CreateNewFolderResponse}
 */
proto.file_service.CreateNewFolderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.CreateNewFolderResponse;
  return proto.file_service.CreateNewFolderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.CreateNewFolderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.CreateNewFolderResponse}
 */
proto.file_service.CreateNewFolderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFolderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.CreateNewFolderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.CreateNewFolderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.CreateNewFolderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.CreateNewFolderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFolderId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.CreateNewFolderResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.CreateNewFolderResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.CreateNewFolderResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.CreateNewFolderResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string folder_id = 3;
 * @return {string}
 */
proto.file_service.CreateNewFolderResponse.prototype.getFolderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.CreateNewFolderResponse.prototype.setFolderId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.DeleteFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.DeleteFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.DeleteFileRequest.displayName = 'proto.file_service.DeleteFileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.DeleteFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.DeleteFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.DeleteFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.DeleteFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.DeleteFileRequest}
 */
proto.file_service.DeleteFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.DeleteFileRequest;
  return proto.file_service.DeleteFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.DeleteFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.DeleteFileRequest}
 */
proto.file_service.DeleteFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.DeleteFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.DeleteFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.DeleteFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.DeleteFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.file_service.DeleteFileRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.DeleteFileRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.file_service.DeleteFileRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.DeleteFileRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.DeleteFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.DeleteFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.DeleteFileResponse.displayName = 'proto.file_service.DeleteFileResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.DeleteFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.DeleteFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.DeleteFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.DeleteFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.DeleteFileResponse}
 */
proto.file_service.DeleteFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.DeleteFileResponse;
  return proto.file_service.DeleteFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.DeleteFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.DeleteFileResponse}
 */
proto.file_service.DeleteFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.DeleteFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.DeleteFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.DeleteFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.DeleteFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.DeleteFileResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.DeleteFileResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.DeleteFileResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.DeleteFileResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.RenameFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.RenameFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.RenameFileRequest.displayName = 'proto.file_service.RenameFileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.RenameFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.RenameFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.RenameFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.RenameFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.RenameFileRequest}
 */
proto.file_service.RenameFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.RenameFileRequest;
  return proto.file_service.RenameFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.RenameFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.RenameFileRequest}
 */
proto.file_service.RenameFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.RenameFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.RenameFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.RenameFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.RenameFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.file_service.RenameFileRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.RenameFileRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.file_service.RenameFileRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.RenameFileRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.file_service.RenameFileRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.RenameFileRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.RenameFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.RenameFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.RenameFileResponse.displayName = 'proto.file_service.RenameFileResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.RenameFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.RenameFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.RenameFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.RenameFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.RenameFileResponse}
 */
proto.file_service.RenameFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.RenameFileResponse;
  return proto.file_service.RenameFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.RenameFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.RenameFileResponse}
 */
proto.file_service.RenameFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.RenameFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.RenameFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.RenameFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.RenameFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.RenameFileResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.RenameFileResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.RenameFileResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.RenameFileResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.MoveFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.MoveFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.MoveFileRequest.displayName = 'proto.file_service.MoveFileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.MoveFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.MoveFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.MoveFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.MoveFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 2, ""),
    source: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    copy: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.MoveFileRequest}
 */
proto.file_service.MoveFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.MoveFileRequest;
  return proto.file_service.MoveFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.MoveFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.MoveFileRequest}
 */
proto.file_service.MoveFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCopy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.MoveFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.MoveFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.MoveFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.MoveFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCopy();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.file_service.MoveFileRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.MoveFileRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destination = 2;
 * @return {string}
 */
proto.file_service.MoveFileRequest.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.MoveFileRequest.prototype.setDestination = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string source = 3;
 * @return {string}
 */
proto.file_service.MoveFileRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.MoveFileRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_id = 4;
 * @return {string}
 */
proto.file_service.MoveFileRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.file_service.MoveFileRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool copy = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.file_service.MoveFileRequest.prototype.getCopy = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.file_service.MoveFileRequest.prototype.setCopy = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.MoveFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.MoveFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.MoveFileResponse.displayName = 'proto.file_service.MoveFileResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.MoveFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.MoveFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.MoveFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.MoveFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.MoveFileResponse}
 */
proto.file_service.MoveFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.MoveFileResponse;
  return proto.file_service.MoveFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.MoveFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.MoveFileResponse}
 */
proto.file_service.MoveFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.MoveFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.MoveFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.MoveFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.MoveFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.MoveFileResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.MoveFileResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.MoveFileResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.MoveFileResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.GetFolderContentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.GetFolderContentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.GetFolderContentRequest.displayName = 'proto.file_service.GetFolderContentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.GetFolderContentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.GetFolderContentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.GetFolderContentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFolderContentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.GetFolderContentRequest}
 */
proto.file_service.GetFolderContentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.GetFolderContentRequest;
  return proto.file_service.GetFolderContentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.GetFolderContentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.GetFolderContentRequest}
 */
proto.file_service.GetFolderContentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.GetFolderContentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.GetFolderContentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.GetFolderContentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFolderContentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.file_service.GetFolderContentRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.GetFolderContentRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.file_service.GetFolderContentRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.GetFolderContentRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.GetFolderContentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.GetFolderContentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.GetFolderContentResponse.displayName = 'proto.file_service.GetFolderContentResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.GetFolderContentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.GetFolderContentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.GetFolderContentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFolderContentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    content: (f = msg.getContent()) && proto.file_service.FSLevel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.GetFolderContentResponse}
 */
proto.file_service.GetFolderContentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.GetFolderContentResponse;
  return proto.file_service.GetFolderContentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.GetFolderContentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.GetFolderContentResponse}
 */
proto.file_service.GetFolderContentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    case 3:
      var value = new proto.file_service.FSLevel;
      reader.readMessage(value,proto.file_service.FSLevel.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.GetFolderContentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.GetFolderContentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.GetFolderContentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFolderContentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.file_service.FSLevel.serializeBinaryToWriter
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.GetFolderContentResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.GetFolderContentResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.GetFolderContentResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.GetFolderContentResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FSLevel content = 3;
 * @return {?proto.file_service.FSLevel}
 */
proto.file_service.GetFolderContentResponse.prototype.getContent = function() {
  return /** @type{?proto.file_service.FSLevel} */ (
    jspb.Message.getWrapperField(this, proto.file_service.FSLevel, 3));
};


/** @param {?proto.file_service.FSLevel|undefined} value */
proto.file_service.GetFolderContentResponse.prototype.setContent = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.file_service.GetFolderContentResponse.prototype.clearContent = function() {
  this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.file_service.GetFolderContentResponse.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.GetFileContentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.GetFileContentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.GetFileContentRequest.displayName = 'proto.file_service.GetFileContentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.GetFileContentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.GetFileContentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.GetFileContentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFileContentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    secretKey: msg.getSecretKey_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.GetFileContentRequest}
 */
proto.file_service.GetFileContentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.GetFileContentRequest;
  return proto.file_service.GetFileContentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.GetFileContentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.GetFileContentRequest}
 */
proto.file_service.GetFileContentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecretKey(value);
      break;
    case 4:
      var value = /** @type {!proto.file_service.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.GetFileContentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.GetFileContentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.GetFileContentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFileContentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSecretKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.file_service.GetFileContentRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.GetFileContentRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.file_service.GetFileContentRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.GetFileContentRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes secret_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.GetFileContentRequest.prototype.getSecretKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes secret_key = 3;
 * This is a type-conversion wrapper around `getSecretKey()`
 * @return {string}
 */
proto.file_service.GetFileContentRequest.prototype.getSecretKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecretKey()));
};


/**
 * optional bytes secret_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecretKey()`
 * @return {!Uint8Array}
 */
proto.file_service.GetFileContentRequest.prototype.getSecretKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecretKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.GetFileContentRequest.prototype.setSecretKey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Type type = 4;
 * @return {!proto.file_service.Type}
 */
proto.file_service.GetFileContentRequest.prototype.getType = function() {
  return /** @type {!proto.file_service.Type} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.file_service.Type} value */
proto.file_service.GetFileContentRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.GetFileContentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.GetFileContentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.GetFileContentResponse.displayName = 'proto.file_service.GetFileContentResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.GetFileContentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.GetFileContentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.GetFileContentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFileContentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    file: (f = msg.getFile()) && proto.file_service.File.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.GetFileContentResponse}
 */
proto.file_service.GetFileContentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.GetFileContentResponse;
  return proto.file_service.GetFileContentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.GetFileContentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.GetFileContentResponse}
 */
proto.file_service.GetFileContentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    case 3:
      var value = new proto.file_service.File;
      reader.readMessage(value,proto.file_service.File.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.GetFileContentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.GetFileContentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.GetFileContentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFileContentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.file_service.File.serializeBinaryToWriter
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.GetFileContentResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.GetFileContentResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.GetFileContentResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.GetFileContentResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional File file = 3;
 * @return {?proto.file_service.File}
 */
proto.file_service.GetFileContentResponse.prototype.getFile = function() {
  return /** @type{?proto.file_service.File} */ (
    jspb.Message.getWrapperField(this, proto.file_service.File, 3));
};


/** @param {?proto.file_service.File|undefined} value */
proto.file_service.GetFileContentResponse.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.file_service.GetFileContentResponse.prototype.clearFile = function() {
  this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.file_service.GetFileContentResponse.prototype.hasFile = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.GetFileTreeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.GetFileTreeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.GetFileTreeRequest.displayName = 'proto.file_service.GetFileTreeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.GetFileTreeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.GetFileTreeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.GetFileTreeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFileTreeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.GetFileTreeRequest}
 */
proto.file_service.GetFileTreeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.GetFileTreeRequest;
  return proto.file_service.GetFileTreeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.GetFileTreeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.GetFileTreeRequest}
 */
proto.file_service.GetFileTreeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.GetFileTreeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.GetFileTreeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.GetFileTreeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFileTreeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string root_identifier = 1;
 * @return {string}
 */
proto.file_service.GetFileTreeRequest.prototype.getRootIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.GetFileTreeRequest.prototype.setRootIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.file_service.GetFileTreeRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.GetFileTreeRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.GetFileTreeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.GetFileTreeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.GetFileTreeResponse.displayName = 'proto.file_service.GetFileTreeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.GetFileTreeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.GetFileTreeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.GetFileTreeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFileTreeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tree: (f = msg.getTree()) && proto.file_service.FSTree.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.GetFileTreeResponse}
 */
proto.file_service.GetFileTreeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.GetFileTreeResponse;
  return proto.file_service.GetFileTreeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.GetFileTreeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.GetFileTreeResponse}
 */
proto.file_service.GetFileTreeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    case 3:
      var value = new proto.file_service.FSTree;
      reader.readMessage(value,proto.file_service.FSTree.deserializeBinaryFromReader);
      msg.setTree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.GetFileTreeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.GetFileTreeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.GetFileTreeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.GetFileTreeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTree();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.file_service.FSTree.serializeBinaryToWriter
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.GetFileTreeResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.GetFileTreeResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.GetFileTreeResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.GetFileTreeResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FSTree tree = 3;
 * @return {?proto.file_service.FSTree}
 */
proto.file_service.GetFileTreeResponse.prototype.getTree = function() {
  return /** @type{?proto.file_service.FSTree} */ (
    jspb.Message.getWrapperField(this, proto.file_service.FSTree, 3));
};


/** @param {?proto.file_service.FSTree|undefined} value */
proto.file_service.GetFileTreeResponse.prototype.setTree = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.file_service.GetFileTreeResponse.prototype.clearTree = function() {
  this.setTree(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.file_service.GetFileTreeResponse.prototype.hasTree = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.UpdateFileContentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.UpdateFileContentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.UpdateFileContentRequest.displayName = 'proto.file_service.UpdateFileContentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.UpdateFileContentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.UpdateFileContentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.UpdateFileContentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.UpdateFileContentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newContent: msg.getNewContent_asB64(),
    userId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fileType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    secretKey: msg.getSecretKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.UpdateFileContentRequest}
 */
proto.file_service.UpdateFileContentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.UpdateFileContentRequest;
  return proto.file_service.UpdateFileContentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.UpdateFileContentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.UpdateFileContentRequest}
 */
proto.file_service.UpdateFileContentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewContent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {!proto.file_service.Type} */ (reader.readEnum());
      msg.setFileType(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecretKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.UpdateFileContentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.UpdateFileContentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.UpdateFileContentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.UpdateFileContentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFileType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSecretKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.file_service.UpdateFileContentRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.UpdateFileContentRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes new_content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.UpdateFileContentRequest.prototype.getNewContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes new_content = 2;
 * This is a type-conversion wrapper around `getNewContent()`
 * @return {string}
 */
proto.file_service.UpdateFileContentRequest.prototype.getNewContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewContent()));
};


/**
 * optional bytes new_content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewContent()`
 * @return {!Uint8Array}
 */
proto.file_service.UpdateFileContentRequest.prototype.getNewContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.UpdateFileContentRequest.prototype.setNewContent = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.file_service.UpdateFileContentRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.UpdateFileContentRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Type file_type = 4;
 * @return {!proto.file_service.Type}
 */
proto.file_service.UpdateFileContentRequest.prototype.getFileType = function() {
  return /** @type {!proto.file_service.Type} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.file_service.Type} value */
proto.file_service.UpdateFileContentRequest.prototype.setFileType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes secret_key = 5;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.UpdateFileContentRequest.prototype.getSecretKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes secret_key = 5;
 * This is a type-conversion wrapper around `getSecretKey()`
 * @return {string}
 */
proto.file_service.UpdateFileContentRequest.prototype.getSecretKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecretKey()));
};


/**
 * optional bytes secret_key = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecretKey()`
 * @return {!Uint8Array}
 */
proto.file_service.UpdateFileContentRequest.prototype.getSecretKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecretKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.UpdateFileContentRequest.prototype.setSecretKey = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.UpdateFileContentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.UpdateFileContentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.UpdateFileContentResponse.displayName = 'proto.file_service.UpdateFileContentResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.UpdateFileContentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.UpdateFileContentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.UpdateFileContentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.UpdateFileContentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.UpdateFileContentResponse}
 */
proto.file_service.UpdateFileContentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.UpdateFileContentResponse;
  return proto.file_service.UpdateFileContentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.UpdateFileContentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.UpdateFileContentResponse}
 */
proto.file_service.UpdateFileContentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.UpdateFileContentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.UpdateFileContentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.UpdateFileContentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.UpdateFileContentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.UpdateFileContentResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.UpdateFileContentResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.UpdateFileContentResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.UpdateFileContentResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.ShareFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.file_service.ShareFileRequest.repeatedFields_, null);
};
goog.inherits(proto.file_service.ShareFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.ShareFileRequest.displayName = 'proto.file_service.ShareFileRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.file_service.ShareFileRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.ShareFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.ShareFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.ShareFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.ShareFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userIdentifiersList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.ShareFileRequest}
 */
proto.file_service.ShareFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.ShareFileRequest;
  return proto.file_service.ShareFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.ShareFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.ShareFileRequest}
 */
proto.file_service.ShareFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIdentifiers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.ShareFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.ShareFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.ShareFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.ShareFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.file_service.ShareFileRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.ShareFileRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string user_identifiers = 2;
 * @return {!Array<string>}
 */
proto.file_service.ShareFileRequest.prototype.getUserIdentifiersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.file_service.ShareFileRequest.prototype.setUserIdentifiersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.file_service.ShareFileRequest.prototype.addUserIdentifiers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.file_service.ShareFileRequest.prototype.clearUserIdentifiersList = function() {
  this.setUserIdentifiersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.ShareFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.ShareFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.ShareFileResponse.displayName = 'proto.file_service.ShareFileResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.ShareFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.ShareFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.ShareFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.ShareFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.ShareFileResponse}
 */
proto.file_service.ShareFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.ShareFileResponse;
  return proto.file_service.ShareFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.ShareFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.ShareFileResponse}
 */
proto.file_service.ShareFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.ShareFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.ShareFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.ShareFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.ShareFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.ShareFileResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.ShareFileResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.ShareFileResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.ShareFileResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.DownloadFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.DownloadFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.DownloadFileRequest.displayName = 'proto.file_service.DownloadFileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.DownloadFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.DownloadFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.DownloadFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.DownloadFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourceId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    secretPhrase: msg.getSecretPhrase_asB64(),
    watermarkImage: msg.getWatermarkImage_asB64(),
    watermarkMessage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    steganoMessage: msg.getSteganoMessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.DownloadFileRequest}
 */
proto.file_service.DownloadFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.DownloadFileRequest;
  return proto.file_service.DownloadFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.DownloadFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.DownloadFileRequest}
 */
proto.file_service.DownloadFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecretPhrase(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWatermarkImage(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWatermarkMessage(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSteganoMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.DownloadFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.DownloadFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.DownloadFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.DownloadFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSecretPhrase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getWatermarkImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getWatermarkMessage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSteganoMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.file_service.DownloadFileRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.DownloadFileRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.file_service.DownloadFileRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.DownloadFileRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string source_id = 3;
 * @return {string}
 */
proto.file_service.DownloadFileRequest.prototype.getSourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.file_service.DownloadFileRequest.prototype.setSourceId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes secret_phrase = 4;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.DownloadFileRequest.prototype.getSecretPhrase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes secret_phrase = 4;
 * This is a type-conversion wrapper around `getSecretPhrase()`
 * @return {string}
 */
proto.file_service.DownloadFileRequest.prototype.getSecretPhrase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecretPhrase()));
};


/**
 * optional bytes secret_phrase = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecretPhrase()`
 * @return {!Uint8Array}
 */
proto.file_service.DownloadFileRequest.prototype.getSecretPhrase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecretPhrase()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.DownloadFileRequest.prototype.setSecretPhrase = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes watermark_image = 5;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.DownloadFileRequest.prototype.getWatermarkImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes watermark_image = 5;
 * This is a type-conversion wrapper around `getWatermarkImage()`
 * @return {string}
 */
proto.file_service.DownloadFileRequest.prototype.getWatermarkImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWatermarkImage()));
};


/**
 * optional bytes watermark_image = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWatermarkImage()`
 * @return {!Uint8Array}
 */
proto.file_service.DownloadFileRequest.prototype.getWatermarkImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWatermarkImage()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.DownloadFileRequest.prototype.setWatermarkImage = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string watermark_message = 6;
 * @return {string}
 */
proto.file_service.DownloadFileRequest.prototype.getWatermarkMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.file_service.DownloadFileRequest.prototype.setWatermarkMessage = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes stegano_message = 7;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.DownloadFileRequest.prototype.getSteganoMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes stegano_message = 7;
 * This is a type-conversion wrapper around `getSteganoMessage()`
 * @return {string}
 */
proto.file_service.DownloadFileRequest.prototype.getSteganoMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSteganoMessage()));
};


/**
 * optional bytes stegano_message = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSteganoMessage()`
 * @return {!Uint8Array}
 */
proto.file_service.DownloadFileRequest.prototype.getSteganoMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSteganoMessage()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.DownloadFileRequest.prototype.setSteganoMessage = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file_service.DownloadFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file_service.DownloadFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.file_service.DownloadFileResponse.displayName = 'proto.file_service.DownloadFileResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file_service.DownloadFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file_service.DownloadFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file_service.DownloadFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.DownloadFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responseMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    file: (f = msg.getFile()) && proto.file_service.File.toObject(includeInstance, f),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file_service.DownloadFileResponse}
 */
proto.file_service.DownloadFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file_service.DownloadFileResponse;
  return proto.file_service.DownloadFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file_service.DownloadFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file_service.DownloadFileResponse}
 */
proto.file_service.DownloadFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseMessage(value);
      break;
    case 3:
      var value = new proto.file_service.File;
      reader.readMessage(value,proto.file_service.File.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file_service.DownloadFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file_service.DownloadFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file_service.DownloadFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file_service.DownloadFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponseMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.file_service.File.serializeBinaryToWriter
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string response_code = 1;
 * @return {string}
 */
proto.file_service.DownloadFileResponse.prototype.getResponseCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.file_service.DownloadFileResponse.prototype.setResponseCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.file_service.DownloadFileResponse.prototype.getResponseMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.file_service.DownloadFileResponse.prototype.setResponseMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional File file = 3;
 * @return {?proto.file_service.File}
 */
proto.file_service.DownloadFileResponse.prototype.getFile = function() {
  return /** @type{?proto.file_service.File} */ (
    jspb.Message.getWrapperField(this, proto.file_service.File, 3));
};


/** @param {?proto.file_service.File|undefined} value */
proto.file_service.DownloadFileResponse.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.file_service.DownloadFileResponse.prototype.clearFile = function() {
  this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.file_service.DownloadFileResponse.prototype.hasFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes content = 4;
 * @return {!(string|Uint8Array)}
 */
proto.file_service.DownloadFileResponse.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes content = 4;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.file_service.DownloadFileResponse.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.file_service.DownloadFileResponse.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.file_service.DownloadFileResponse.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.file_service.Type = {
  OTHER: 0,
  DOC: 1,
  PDF: 2,
  TXT: 3,
  EXCEL: 4,
  IMAGE: 5
};

goog.object.extend(exports, proto.file_service);
